{"version":3,"sources":["components/Start/Start.js","components/Header/DialogContentTypes/Edit/Edit.js","components/Header/DialogContentTypes/Leaderboard/Leaderboard.js","components/Header/DialogContentTypes/Stop/Stop.js","cardTypes.js","components/Header/Header.js","components/Game/Game.js","container/App.js","index.js"],"names":["useStyles","makeStyles","theme","Box","cursor","height","display","flexDirection","alignItems","justifyContent","textDecoration","Icon","fontSize","typography","h1","color","palette","primary","main","Start","Style","history","useHistory","React","useState","startFadeAnimation","setStartFadeAnimation","typoAnimation","setTypoAnimation","useEffect","setTimeout","Fade","in","timeout","className","p","onClick","event","preventDefault","push","handleClick","Typography","variant","style","visibility","Zoom","Selected","background","common","white","Avatar","width","spacing","grey","Edit","cardType","cardTypes","random","onClickSelectCard","handleDialogClose","Fragment","DialogContent","maxHeight","List","map","card","ListItem","key","id","button","index","onMouseDown","ListItemAvatar","alt","title","icons","ListItemText","DialogActions","Button","Container","error","dark","Leaderboard","leaderboard","onClickClearLeaderboard","item","divider","marginRight","fontWeight","Hidden","smUp","name","length","newName","split","slice","join","handleCutName","xsDown","marginLeft","time","disabled","Restart","DialogContentText","window","location","reload","Math","AppBar","position","zIndex","default","Toolbar","Orange","Yellow","Teal","Red","Header","gameState","handleGetSeconds","randomIcon","setRandomIcon","startTimer","setStartTimer","setTime","floor","timerinterval","iconinterval","setInterval","newRandom","clearInterval","newTime","console","log","openDialog","setOpenDialog","dialogType","setDialogType","handleClickDialogOpen","type","square","Tooltip","placement","IconButton","aria-label","edge","disableFocusRipple","size","Dialog","open","onClose","aria-labelledby","DialogTitle","Backdrop","Countdown","CountdownHeader","DispNone","Disp","Visible","boxShadow","shadows","ButtonSmall","padding","ButtonLarge","Close","Open","Match","backgroundColor","success","Wrong","Game","handleGameState","onClickEnterName","openBackdrop","setOpenBackdrop","countdown","setCountdown","openCards","matchedCards","iconsArray","handleIconClick","icon","currentCard","document","querySelectorAll","currentCardButton","firstChild","currentCardButtonClassList","classList","contains","remove","add","otherCardButton","interval","setName","Paper","colorIndex","handleClickStartGame","m","maxWidth","disableGutters","Grid","container","alignContent","iconArray","temporaryValue","randomIndex","currentIndex","shuffle","i","xs","fullWidth","fullScreen","TransitionComponent","transitionDuration","pt","TextField","margin","label","onChange","target","value","onKeyDown","handleNameMaxLength","placeholder","createMuiTheme","light","secondary","App","props","phase","setState","handleClickSelectCard","localStorage","setItem","JSON","stringify","gameTime","handleClickEnterName","state","newLeaderboard","newItem","sort","a","b","parseFloat","handleClickClearLeaderboard","removeItem","setLeaderboard","parse","getItem","setCardType","this","CssBaseline","ThemeProvider","path","exact","Component","ReactDOM","render","getElementById"],"mappings":"iWAOMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,IAAK,CACDC,OAAQ,UACRC,OAAQ,QACRC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,eAAgB,gBAChBC,eAAgB,QAEpBC,KAAM,CACFC,SAAUV,EAAMW,WAAWC,GAAGF,SAC9BG,MAAOb,EAAMc,QAAQC,QAAQC,UAItB,SAASC,IACpB,IAAMC,EAAQpB,IACRqB,EAAUC,cAFY,EAGwBC,IAAMC,UAAS,GAHvC,mBAGrBC,EAHqB,KAGDC,EAHC,OAIcH,IAAMC,UAAS,GAJ7B,mBAIrBG,EAJqB,KAINC,EAJM,KAuB5B,OANAL,IAAMM,WAAU,WACZC,YAAW,WACPF,GAAiB,KAClB,OACJ,CAACA,IAGA,kBAACG,EAAA,EAAD,CAAMC,GAAIP,EAAoBQ,QAAS,KACnC,kBAAC9B,EAAA,EAAD,CAAK+B,UAAWd,EAAMjB,IAAKgC,EAAG,EAAGC,QAAS,SAACC,GAAD,OAlB9B,SAACA,GACjBA,EAAMC,iBAENZ,GAAuBD,GAEvBK,YAAW,WACPT,EAAQkB,KAAK,WACd,KAWsDC,CAAYH,KAC7D,kBAACI,EAAA,EAAD,CAAYC,QAAQ,SAASC,MAAO,CAACC,WAAY,WAAjD,8BACA,kBAACC,EAAA,EAAD,CAAMb,IAAE,EAACC,QAAS,KACd,kBAACtB,EAAA,EAAD,CAAMuB,UAAS,UAAKd,EAAMT,KAAX,4BAEnB,kBAACoB,EAAA,EAAD,CAAMC,GAAIL,EAAeM,QAAS,KAC9B,kBAACQ,EAAA,EAAD,CAAYC,QAAQ,SAAS3B,MAAM,eAAnC,iC,4EChDdf,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnC4C,SAAU,CACNC,WAAY7C,EAAMc,QAAQC,QAAQC,KAClCH,MAAOb,EAAMc,QAAQgC,OAAOC,MAC5B,UAAY,CACRF,WAAY7C,EAAMc,QAAQC,QAAQC,KAClCH,MAAOb,EAAMc,QAAQgC,OAAOC,QAGpCC,OAAQ,CACNC,MAAOjD,EAAMkD,QAAQ,GACrB/C,OAAQH,EAAMkD,QAAQ,GACtBL,WAAY7C,EAAMc,QAAQqC,KAAK,UAItB,SAASC,EAAT,GAAwF,IAAvEC,EAAsE,EAAtEA,SAAUC,EAA4D,EAA5DA,UAAWC,EAAiD,EAAjDA,OAAQC,EAAyC,EAAzCA,kBAAmBC,EAAsB,EAAtBA,kBACtEvC,EAAQpB,IAEd,OACI,kBAAC,IAAM4D,SAAP,KACI,kBAACC,EAAA,EAAD,CAAelB,MAAO,CAACmB,UAAW,UAC9B,kBAACC,EAAA,EAAD,KAEQP,EAAUQ,KAAI,SAAAC,GACV,OACI,kBAACC,EAAA,EAAD,CACIC,IAAKF,EAAKG,GACVC,QAAM,EACNnC,UAAwB,OAAbqB,GAAqBA,EAASe,QAAUL,EAAKK,OAAsC,OAAbf,GAAoC,IAAfU,EAAKK,MAA3ClD,EAAM0B,SAAoE,GAC1IyB,YAAaZ,EACbvB,QAAS,kBAAMsB,EAAkBO,KACjC,kBAACO,EAAA,EAAD,KACI,kBAACtB,EAAA,EAAD,CAAQuB,IAAKR,EAAKS,MAAOxC,UAAWd,EAAM8B,OAAQR,QAAQ,WACtD,kBAAC/B,EAAA,EAAD,CACIuB,UACmB,WAAf+B,EAAKS,MAAL,cACaT,EAAKU,MAAMlB,IADxB,cAEiBQ,EAAKU,MAAMlB,IAEhCd,MAAO,CAACQ,MAAO,QACfpC,MAAM,cAGlB,kBAAC6D,EAAA,EAAD,CAAc3D,QAASgD,EAAKS,MAAOhC,QAAQ,aAO/D,kBAACmC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQ1C,QAASuB,EAAmB5C,MAAM,WAA1C,UAGA,kBAAC+D,EAAA,EAAD,CAAQ1C,QAAS,kBAAMsB,EAAkBF,EAAUC,KAAU1C,MAAM,UAAU2B,QAAQ,aAArF,Y,aCvDd1C,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnC4C,SAAU,CACNC,WAAY7C,EAAMc,QAAQC,QAAQC,KAClCH,MAAOb,EAAMc,QAAQgC,OAAOC,MAC5B,UAAY,CACRF,WAAY7C,EAAMc,QAAQC,QAAQC,KAClCH,MAAOb,EAAMc,QAAQgC,OAAOC,QAGpC8B,UAAW,CACPzE,QAAS,OACTE,WAAY,SACZC,eAAgB,iBAEpBqE,OAAQ,CACJ/B,WAAY7C,EAAMc,QAAQgE,MAAM9D,KAChCH,MAAOb,EAAMc,QAAQgC,OAAOC,MAC5B,UAAY,CACRF,WAAY7C,EAAMc,QAAQgE,MAAMC,KAChClE,MAAOb,EAAMc,QAAQgC,OAAOC,YAKzB,SAASiC,EAAT,GAAqF,IAA7DC,EAA4D,EAA5DA,YAAaxB,EAA+C,EAA/CA,kBAAmByB,EAA4B,EAA5BA,wBAC7DhE,EAAQpB,IAWd,OACI,kBAAC,IAAM4D,SAAP,KACI,kBAACC,EAAA,EAAD,CAAelB,MAAO,CAACmB,UAAW,UAC9B,kBAACC,EAAA,EAAD,KAEQoB,EAAYnB,KAAI,SAACqB,EAAMf,GACnB,OACI,kBAACJ,EAAA,EAAD,CACIC,IAAKkB,EAAKjB,GACVlC,UAAWmD,EAAKjB,KAAOe,EAAY,GAAGf,GAA3B,UAAmChD,EAAM0B,SAAzC,YAAqD1B,EAAM2D,WAAc3D,EAAM2D,UAC1FO,SAAO,GAEP,yBAAKpD,UAAWd,EAAM2D,UAAWpC,MAAO,CAAClC,eAAgB,YACrD,kBAACgC,EAAA,EAAD,CAAYC,QAAQ,QAAQ3B,MAAM,gBAAgB4B,MAAO,CAAC4C,YAAa,SAAUC,WAAY,WAA7F,UAA4GlB,EAAQ,EAApH,MACA,kBAACmB,EAAA,EAAD,CAAQC,MAAI,GACR,kBAACjD,EAAA,EAAD,CAAYC,QAAQ,MAAM2C,EAAKM,KAAKC,OAAS,EAvB/D,SAACD,GACnB,IAEME,EAFYF,EAAKG,MAAM,IACEC,MAAM,EAAG,GACXC,KAAK,IAElC,MAAM,GAAN,OAAUH,EAAV,OAkBqFI,CAAcZ,EAAKM,MAAQN,EAAKM,OAErF,kBAACF,EAAA,EAAD,CAAQS,QAAM,GACV,kBAACzD,EAAA,EAAD,CAAYC,QAAQ,MAAM2C,EAAKM,QAGvC,kBAAClD,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAO,CAACwD,WAAY,YAAad,EAAKe,KAAlE,WAOpB,kBAACvB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQ1C,QAASuB,EAAmB5C,MAAM,WAA1C,UAGA,kBAAC+D,EAAA,EAAD,CAAQ5C,UAAWd,EAAM0D,OAAQpC,QAAQ,YAAYN,QAAS,kBAAMgD,KAA2BiB,SAAUlB,EAAYS,QAAU,GAA/H,W,aCpEd5F,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnC4E,OAAQ,CACJ/D,MAAOb,EAAMc,QAAQgE,MAAM9D,UAIpB,SAASoF,EAAT,GAAyC,IAAtB3C,EAAqB,EAArBA,kBACxBvC,EAAQpB,IAEd,OACI,kBAAC,IAAM4D,SAAP,KACI,kBAACC,EAAA,EAAD,KACQ,kBAAC0C,EAAA,EAAD,CAAmBnC,GAAG,oBAAtB,4CAEJ,kBAACS,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQ1C,QAASuB,EAAmB5C,MAAM,WAA1C,MAGA,kBAAC+D,EAAA,EAAD,CAAQ5C,UAAWd,EAAM0D,OAAQP,YAAaZ,EAAmBvB,QAAS,WAAOoE,OAAOC,SAASC,QAAO,KAAxG,SCxBpB,IAyJelD,EAzJG,CACd,CACIY,GAAIuC,KAAKlD,SACTiB,MAAO,UACPC,MAAO,CACH,SAAU,SACV,SAAU,SACV,WAAY,WACZ,UAAW,UACX,WAAY,WACZ,UAAW,UACX,UAAW,UACX,UAAW,WAEfL,MAAO,GAEX,CACIF,GAAIuC,KAAKlD,SACTiB,MAAO,SACPC,MAAO,CACH,WAAY,WACZ,YAAa,YACb,gBAAiB,gBACjB,aAAc,aACd,WAAY,WACZ,QAAS,QACT,YAAa,YACb,YAAa,aAEjBL,MAAO,GAEX,CACIF,GAAIuC,KAAKlD,SACTiB,MAAO,YACPC,MAAW,CACP,gBAAiB,gBACjB,YAAa,YACb,cAAe,cACf,WAAY,WACZ,cAAe,cACf,cAAe,cACf,YAAa,YACb,YAAa,aAEjBL,MAAO,GAEX,CACIF,GAAIuC,KAAKlD,SACTiB,MAAO,eACPC,MAAW,CACP,WAAY,WACZ,sBAAuB,sBACvB,YAAa,YACb,cAAe,cACf,kBAAmB,kBACnB,iBAAkB,iBAClB,YAAa,YACb,WAAY,YAEhBL,MAAO,GAEX,CACIF,GAAIuC,KAAKlD,SACTiB,MAAO,WACPC,MAAW,CACP,iBAAkB,iBAClB,eAAgB,eAChB,gBAAiB,gBACjB,cAAe,cACf,cAAe,cACf,gBAAiB,gBACjB,WAAY,WACZ,gBAAiB,iBAErBL,MAAO,GAEX,CACIF,GAAIuC,KAAKlD,SACTiB,MAAO,QACPC,MAAW,CACP,UAAW,UACX,WAAY,WACZ,WAAY,WACZ,aAAc,aACd,aAAc,aACd,eAAgB,eAChB,iBAAkB,iBAClB,wBAAyB,yBAE7BL,MAAO,GAEX,CACIF,GAAIuC,KAAKlD,SACTiB,MAAO,OACPC,MAAW,CACP,WAAY,WACZ,YAAa,YACb,oBAAqB,oBACrB,SAAU,SACV,eAAgB,eAChB,YAAa,YACb,eAAgB,eAChB,iBAAkB,kBAEtBL,MAAO,GAEX,CACIF,GAAIuC,KAAKlD,SACTiB,MAAO,QACPC,MAAW,CACP,YAAa,YACb,YAAa,YACb,cAAe,cACf,WAAY,WACZ,gBAAiB,gBACjB,UAAW,UACX,WAAY,WACZ,qBAAsB,sBAE1BL,MAAO,GAEX,CACIF,GAAIuC,KAAKlD,SACTiB,MAAO,SACPC,MAAW,CACP,mBAAoB,mBACpB,qBAAsB,qBACtB,kBAAmB,kBACnB,mBAAoB,mBACpB,kBAAmB,kBACnB,qBAAsB,qBACtB,YAAa,YACb,eAAgB,gBAEpBL,MAAO,GAEX,CACIF,GAAIuC,KAAKlD,SACTiB,MAAO,WACPC,MAAW,CACP,SAAU,SACV,SAAU,SACV,YAAa,YACb,UAAW,UACX,UAAW,UACX,WAAY,WACZ,gBAAiB,gBACjB,aAAc,cAElBL,MAAO,I,sDCvITtE,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnC0G,OAAQ,CACJC,SAAU,WACVC,OAAQ,GACR/D,WAAY7C,EAAMc,QAAQ+B,WAAWgE,SAEzCC,QAAS,CACL1G,QAAS,OACTG,eAAgB,iBAEpBE,KAAM,CACFwC,MAAO,QAEX8D,OAAQ,CACJlG,MAAO,WAEXmG,OAAQ,CACJnG,MAAO,WAEXoG,KAAM,CACFpG,MAAO,WAEXqG,IAAK,CACDrG,MAAO,WAEX+D,OAAQ,CACJ/D,MAAOb,EAAMc,QAAQgE,MAAM9D,UAIpB,SAASmG,EAAT,GAAuH,IAApG9D,EAAmG,EAAnGA,SAAU+D,EAAyF,EAAzFA,UAAWnC,EAA8E,EAA9EA,YAAaoC,EAAiE,EAAjEA,iBAAkB7D,EAA+C,EAA/CA,kBAAmB0B,EAA4B,EAA5BA,wBAC/FhE,EAAQpB,IADmH,EAG/FuB,IAAMC,SAAS,MAHgF,mBAG5HgG,EAH4H,KAGhHC,EAHgH,OAK7FlG,IAAMC,UAAS,GAL8E,mBAK1HkG,EAL0H,KAK9GC,EAL8G,OAM3GpG,IAAMC,SAAS,GAN4F,mBAM5H4E,EAN4H,KAMtHwB,EANsH,KAQ3HnE,EAASkD,KAAKkB,MAAMlB,KAAKlD,SAAWkD,KAAKkB,MAAM,KAErDtG,IAAMM,WAAU,WACZ,IAAIiG,EACAC,EAGJ,OAAOT,GACH,IAAK,GACDK,GAAc,GACdC,EAAQ,GAERG,EAAeC,aAAY,WACvB,IAAMC,EAAYtB,KAAKkB,MAAMlB,KAAKlD,SAAWkD,KAAKkB,MAAM,KACxDJ,GAAc,WACV,OACiB,OAAblE,EAAA,cACaC,EAAU,GAAGmB,MAAMsD,IACH,WAAnB1E,EAASmB,MAAT,cACWnB,EAASoB,MAAMsD,IAD1B,cAEe1E,EAASoB,MAAMsD,SAElC,OAAfT,EAAsB,GAjBjB,KAmBR,MACJ,IAAK,UACD1F,YAAW,WACP6F,GAAc,KACf,KAEHO,cAAcH,GACd,MACJ,IAAK,UACDjG,YAAW,WACP6F,GAAc,GACdJ,EAAiBnB,KAClB,GAgBX,OATkB,IAAfsB,EACCI,EAAgBE,aAAY,WACxBJ,GAAQ,SAAAO,GAAO,OAAIA,EAAU,KAC7BC,QAAQC,IAAIjC,KACb,KAEH8B,cAAcJ,GAGX,WAAOI,cAAcH,GAAeG,cAAcJ,MAC1D,CAACR,EAAWG,EAAelE,EAAUE,EAAQ+D,EAAYE,EAAYE,EAASxB,EAAMmB,IA7D0C,MAgE7FhG,IAAMC,UAAS,GAhE8E,mBAgE1H8G,EAhE0H,KAgE9GC,EAhE8G,OAiE7FhH,IAAMC,SAAS,MAjE8E,mBAiE1HgH,EAjE0H,KAiE9GC,EAjE8G,KAoE3HC,EAAwB,SAACC,GAC3BJ,GAAc,GACdE,EAAcE,IAIZhF,EAAoB,WACtB4E,GAAc,GACdd,EAAc,OAGlB,OACI,kBAAC,IAAM7D,SAAP,KACI,kBAACgD,EAAA,EAAD,CAAQ1E,UAAWd,EAAMwF,OAAQ7F,MAAM,cAAc8F,SAAS,SAASnE,QAAQ,WAAWkG,QAAM,GAC5F,kBAAC5B,EAAA,EAAD,CAAS9E,UAAWd,EAAM4F,SAEJ,YAAdM,GAAyC,YAAdA,EAEvB,kBAAC7E,EAAA,EAAD,CAAY1B,MAAM,UAAU2B,QAAQ,MAAM0D,EAAK,oCAE3C,kBAACyC,EAAA,EAAD,CAASnE,MAAM,mBAAmBoE,UAAU,SACxC,8BACI,kBAACC,EAAA,EAAD,CAAYC,aAAW,mBAAmBjI,MAAM,UAAU2B,QAAQ,OAAOuG,KAAK,QAAQ7G,QAAS,kBAAMsG,EAAsB,UACvH,uBAAGxG,UAAS,UAAKsF,EAAL,KAAoB7E,MAAO,CAACQ,MAAO,gBAKvE,kBAAC2B,EAAA,EAAD,CAAQkE,aAAW,OAAOjI,MAAM,UAAUmI,oBAAkB,EAACC,KAAK,QAAQzG,QAAQ,QAC9E,0BAAMR,UAAWd,EAAM6F,QAAvB,OACA,0BAAM/E,UAAWd,EAAM8F,QAAvB,OACA,0BAAMhF,UAAWd,EAAM+F,MAAvB,OACA,0BAAMjF,UAAWd,EAAMgG,KAAvB,SAEJ,kBAACyB,EAAA,EAAD,CAASnE,MAAqB,YAAd4C,GAAyC,YAAdA,EAA0B,YAAcnC,EAAYS,QAAU,EAAI,GAAK,cAAekD,UAAU,QACvI,8BAEsB,YAAdxB,GAAyC,YAAdA,EAEnB,kBAACyB,EAAA,EAAD,CAAYC,aAAW,YAAY9G,UAAWd,EAAM0D,OAAQpC,QAAQ,OAAOuG,KAAK,MAAM7G,QAAS,kBAAMsG,EAAsB,UACvH,kBAAC/H,EAAA,EAAD,CAAMuB,UAAS,UAAKd,EAAMT,KAAX,kBAGnB,kBAACoI,EAAA,EAAD,CAAYC,aAAW,cAAcjI,MAAM,YAAY2B,QAAQ,OAAOuG,KAAK,MAAM7G,QAAS,kBAAMsG,EAAsB,gBAAgBrC,SAAUlB,EAAYS,QAAU,GAClK,kBAACjF,EAAA,EAAD,CAAMuB,UAAS,UAAKd,EAAMT,KAAX,yBAO/C,kBAACyI,EAAA,EAAD,CACIC,KAAMf,EACNgB,QAAS3F,EACT4F,kBAAgB,eAEhB,kBAACC,EAAA,EAAD,CAAapF,GAAG,eAEO,SAAfoE,EACM,mBACmB,gBAAfA,EACI,cACmB,SAAfA,EACI,YACI,IAIf,SAAfA,EACM,kBAAClF,EAAD,CAAMC,SAAUA,EAAUC,UAAWA,EAAWC,OAAQkD,KAAKkB,MAAMlB,KAAKlD,SAAWkD,KAAKkB,MAAM,IAAKnE,kBAAmBA,EAAmBC,kBAAmBA,IACzI,gBAAf6E,EACI,kBAACtD,EAAD,CAAaC,YAAaA,EAAaxB,kBAAmBA,EAAmByB,wBAAyBA,IACnF,SAAfoD,EACI,kBAAC,EAAD,CAAMrD,YAAaA,EAAaxB,kBAAmBA,EAAmByB,wBAAyBA,IAC3F,K,iDCpLxCpF,GAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCuJ,SAAU,CACN3C,OAAQ,KAEZ4C,UAAW,CACPrJ,OAAQ,CAAC,CAAC,QAAS,cACnBC,QAAS,OACTE,WAAY,SACZC,eAAgB,UAEpBkJ,gBAAiB,CACbnE,WAAY,MACZ5E,SAAU,UAEdgJ,SAAU,CACNtJ,QAAS,QAEbuJ,KAAM,CACFvJ,QAAS,IAEbmF,OAAQ,CACJ7C,WAAY,UAEhBkH,QAAS,CACLlH,WAAY,WAEhBkC,OAAQ,CACJ/D,MAAOb,EAAMc,QAAQC,QAAQC,KAC7B6I,UAAW7J,EAAM8J,QAAQ,GACzB,UAAW,CACPD,UAAW7J,EAAM8J,QAAQ,KAGjCC,YAAa,CACTC,QAAShK,EAAMkD,QAAQ,IAAK,IAEhC+G,YAAa,CACTD,QAAShK,EAAMkD,QAAQ,EAAG,IAE9BzC,KAAM,CACFwC,MAAO,QAEXiH,MAAO,CACH,SAAU,CACNxH,WAAY,WAGpByH,KAAM,CACF,SAAU,CACNzH,WAAY,YAGpB0H,MAAO,CACHC,gBAAiBrK,EAAMc,QAAQwJ,QAAQtJ,KACvCH,MAAOb,EAAMc,QAAQgC,OAAOC,MAE5B,UAAW,CACPsH,gBAAiBrK,EAAMc,QAAQwJ,QAAQtJ,KACvCH,MAAOb,EAAMc,QAAQgC,OAAOC,QAGpCwH,MAAO,CACHF,gBAAiBrK,EAAMc,QAAQgE,MAAM9D,KACrCH,MAAOb,EAAMc,QAAQgC,OAAOC,MAC5B,UAAW,CACPsH,gBAAiBrK,EAAMc,QAAQgE,MAAM9D,KACrCH,MAAOb,EAAMc,QAAQgC,OAAOC,YAKzB,SAASyH,GAAT,GAA8E,IAA7DnH,EAA4D,EAA5DA,SAAU+D,EAAkD,EAAlDA,UAAWqD,EAAuC,EAAvCA,gBAAiBC,EAAsB,EAAtBA,iBAC5DxJ,EAAQpB,KAD0E,EAIhDuB,IAAMC,UAAS,GAJiC,mBAIjFqJ,EAJiF,KAInEC,EAJmE,OAKxDvJ,IAAMC,SAAS,GALyC,mBAKnFuJ,EALmF,KAKxEC,EALwE,KAkCpFC,EAAY,GACZC,EAAe,GAEbC,EAA2B,OAAb5H,EACd,CACE,SAAU,SACV,SAAU,SACV,WAAY,WACZ,UAAW,UACX,WAAY,WACZ,UAAW,UACX,UAAW,UACX,UAAW,WAETA,EAASoB,MAmBbyG,EAAkB,SAAC/I,EAAOiC,EAAO+G,GAGnC,GAFAhJ,EAAMC,iBAEH2I,EAAUrF,QAAU,EAAvB,CACI,IACM0F,EADWC,SAASC,iBAAiB,SACdlH,EAAQ,GAC/BmH,EAAoBH,EAAYI,WAChCC,EAA6BF,EAAkBG,UAErD,IAAKD,EAA2BE,SAASzK,EAAMiJ,QAAYsB,EAA2BE,SAASzK,EAAMkJ,SACjGmB,EAAkBG,UAAUE,OAAO1K,EAAMgJ,OACzCqB,EAAkBG,UAAUG,IAAI3K,EAAMiJ,MACtCY,EAAU1I,KAAK+I,GAEZL,EAAUrF,OAAS,GAAE,CACpB,IACMoG,EADYf,EAAU,GACMS,WACNM,EAAgBN,WACFA,WACGE,UAEnBC,SAASR,IAC/BI,EAAkBG,UAAUG,IAAI3K,EAAMkJ,OACtC0B,EAAgBJ,UAAUG,IAAI3K,EAAMkJ,OAEpCY,EAAa3I,KAAKyJ,GAClBd,EAAa3I,KAAKkJ,GAClBR,EAAY,KAEZQ,EAAkBG,UAAUG,IAAI3K,EAAMqJ,OACtCuB,EAAgBJ,UAAUG,IAAI3K,EAAMqJ,OAEpC3I,YAAW,WACH2J,EAAkBG,UAAUE,OAAO1K,EAAMiJ,KAAMjJ,EAAMqJ,OACrDuB,EAAgBJ,UAAUE,OAAO1K,EAAMiJ,KAAMjJ,EAAMqJ,OACnDgB,EAAkBG,UAAUG,IAAI3K,EAAMgJ,OACtC4B,EAAgBJ,UAAUG,IAAI3K,EAAMgJ,OAEpCa,EAAY,KACjB,SASvB1J,IAAMM,WAAU,WACZ,IAAIoK,EAEJ,OAAO3E,GACH,IAAK,GACD0D,EAAa,GACb9C,cAAc+D,GAEd,MACJ,IAAK,UACDA,EAAWjE,aAAY,WACQ,KAAxBkD,EAAatF,SACZsC,cAAc+D,GACdtB,EAAgB,WAChBjC,EAAsB,WAE3B,KAOX,OAAO,kBAAMR,cAAc+D,MAC5B,CAACf,EAAcP,EAAiBrD,IA3IqD,MA8IpD/F,IAAMC,UAAS,GA9IqC,mBA8IjF8G,EA9IiF,KA8IrEC,EA9IqE,OA+IpDhH,IAAMC,SAAS,MA/IqC,mBA+IjFgH,EA/IiF,KA+IrEC,EA/IqE,OAgJhElH,IAAMC,SAAS,IAhJiD,mBAgJjFmE,EAhJiF,KAgJ3EuG,EAhJ2E,KAkKlFxD,EAAwB,SAACC,GAC3BJ,GAAc,GACdE,EAAcE,IAIZhF,EAAoB,SAACgF,GACvBJ,GAAc,GACF,SAATI,IACCuD,EAAQ,IACRvB,EAAgB,IAChBG,GAAgB,KAIxB,OACI,kBAAC,IAAMlH,SAAP,KACI,kBAAC6F,EAAA,EAAD,CAAUvH,UAAWd,EAAMqI,SAAUJ,KAAMwB,GACvC,kBAACsB,EAAA,EAAD,CAAOzJ,QAAQ,YACX,kBAACvC,EAAA,EAAD,CAAKgC,EAAG,GACJ,kBAAC2C,EAAA,EAAD,CAAQkE,aAAW,QAAQjI,MAAM,UAAUoI,KAAK,QAAQzG,QAAQ,YAAYN,QAAS,kBA5K5E,WACzB0I,GAAgB,GAChBpC,EAAsB,aAEtB,IAAI0D,EAAa,EAEjBtK,YAAW,WACP6I,EAAgB,aACjB,KAEH,IAAMsB,EAAWjE,aAAY,WACzBgD,IAAeD,GACfqB,IAAeA,EAEZrB,GAAa,IACZ7C,cAAc+D,GACdnK,YAAW,WACP6B,MACD,QAER,KAwJwG0I,KAA3F,iBAIZ,kBAACtK,EAAA,EAAD,CAAMC,IAAqB,IAAjB6I,EAAsC5I,QAAS,KACrD,kBAAC9B,EAAA,EAAD,CAAK+B,WAA4B,IAAjB2I,EAAwBzJ,EAAMqE,OAASrE,EAAM0I,QAASwC,EAAG,GACrE,kBAACvH,EAAA,EAAD,CAAWwH,SAAS,KAAKC,gBAAc,GACnC,kBAACC,GAAA,EAAD,CAAMC,WAAS,EAACtJ,QAAS,EAAGV,QAAQ,WAAWiK,aAAa,SAASnM,WAAW,UA1IpF,SAACoM,GAGb,IAFA,IAAqCC,EAAgBC,EAAjDC,EAAeH,EAAUhH,OAEL,IAAjBmH,GACHD,EAAcnG,KAAKkB,MAAMlB,KAAKlD,SAAWsJ,GAEzCF,EAAiBD,EADjBG,GAAgB,GAEhBH,EAAUG,GAAgBH,EAAUE,GACpCF,EAAUE,GAAeD,EAE7B,OAAOD,EAkIiBI,CAAQ7B,GAAYnH,KAAI,SAACiJ,EAAG3I,GACxB,OACI,kBAACmI,GAAA,EAAD,CAAMvK,UAAU,OAAOiC,IAAKwC,KAAKlD,SAAU4B,MAAI,EAAC6H,GAAI,GAC5C,kBAACzH,EAAA,EAAD,CAAQC,MAAI,GACR,kBAACZ,EAAA,EAAD,CAAQ5C,UAAS,UAAKd,EAAM0D,OAAX,YAAqB1D,EAAM6I,YAA3B,YAA0C7I,EAAMgJ,OAAS1H,QAAQ,YAAYyG,KAAK,QAAQgE,WAAS,EAAC5I,YAAa,SAAClC,GAAD,OAAW+I,EAAgB/I,EAAOiC,EAAQ,EAAG2I,KAC3K,kBAACtM,EAAA,EAAD,CACIuB,UACiB,OAAbqB,EAAA,cACa0J,EADb,YACkB7L,EAAMT,MACK,WAAnB4C,EAASmB,MAAT,cACWuI,EADX,YACgB7L,EAAMT,MADtB,cAEesM,EAFf,YAEoB7L,EAAMT,MAExCgC,MAAO,CAAC/B,SAAU,eAG9B,kBAAC6E,EAAA,EAAD,CAAQS,QAAM,GACV,kBAACpB,EAAA,EAAD,CAAQ5C,UAAS,UAAKd,EAAM0D,OAAX,YAAqB1D,EAAM+I,YAA3B,YAA0C/I,EAAMgJ,OAAS1H,QAAQ,YAAYyG,KAAK,QAAQgE,WAAS,EAAC5I,YAAa,SAAClC,GAAD,OAAW+I,EAAgB/I,EAAOiC,EAAQ,EAAG2I,KAC3K,kBAACtM,EAAA,EAAD,CACIuB,UACiB,OAAbqB,EAAA,cACa0J,EADb,YACkB7L,EAAMT,MACK,WAAnB4C,EAASmB,MAAT,cACWuI,EADX,YACgB7L,EAAMT,MADtB,cAEesM,EAFf,YAEoB7L,EAAMT,MAExCgC,MAAO,CAAC/B,SAAU,wBAYlE,kBAACwI,EAAA,EAAD,CACIC,KAAMf,EACN8E,WAA2B,SAAf5E,EACZe,kBAAgB,cAChB8D,oBAAqBtL,IACrBuL,mBAAoB,KAGD,SAAf9E,EAEI,kBAAC,IAAM5E,SAAP,KACI,kBAACC,EAAA,EAAD,CAAelB,MAAO,CAACmB,UAAW,UAC9B,kBAACrB,EAAA,EAAD,CAAY1B,MAAM,YAAY2B,QAAQ,MAAtC,mBACA,kBAACD,EAAA,EAAD,CAAY1B,MAAM,cAAc2B,QAAQ,SAAxC,2BACA,kBAACvC,EAAA,EAAD,CAAKoN,GAAI,IACT,kBAACC,GAAA,EAAD,CACIC,OAAO,QACPrJ,GAAG,OACHsJ,MAAM,aACN/E,KAAK,OACLgF,SAAU,SAACtL,GAAD,OAAW6J,EAAQ7J,EAAMuL,OAAOC,QAC1CC,UAAW,SAACzL,GAAD,OAvGf,SAACA,GACtBsD,EAAKC,OAAS,KACI,cAAdvD,EAAM8B,KAAqC,WAAd9B,EAAM8B,KAClC+H,EAAQ,IACR7J,EAAMuL,OAAOC,MAAQ,IAErBxL,EAAMuL,OAAOC,MAAQ,mCAiGqBE,CAAoB1L,IAC1CwL,MAAOlI,EACPqI,YAAY,aACZtL,QAAQ,WACRyK,WAAS,KAGjB,kBAACtI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQ1C,QAAS,kBAAMuB,EAAkB,SAAS5C,MAAM,WAAxD,UAGA,kBAAC+D,EAAA,EAAD,CAAQ1C,QAAS,WAAOuB,EAAkB,QAASiH,EAAiBjF,IAAS5E,MAAM,WAAnF,YAKa,cAAfyH,EAEE,kBAAC3E,EAAA,EAAD,CAAe3B,UAAWd,EAAMsI,WArQ7C,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,WAuQ5B1F,KAAI,SAACjD,EAAOuD,GACf,OACI,kBAACzB,EAAA,EAAD,CAAMsB,IAAKG,EAAOtC,GAAI+I,KAAgB,GAAGzG,EAAM,GAAoBrC,QAAS,KACxE,kBAACQ,EAAA,EAAD,CACIP,UAAS,UAAKd,EAAMuI,gBAAX,YAA8BoB,KAAgB,GAAGzG,EAAM,GAAMlD,EAAMyI,KAAOzI,EAAMwI,UACzFlH,QAAQ,KAAKC,MAAO,CAAC5B,MAAOA,IAAwB,IAAdgK,EAAkB,KAAOA,QAOjF,K,cCxVhC7K,GAAQ+N,YAAe,CAC3BjN,QAAS,CACPC,QAAS,CACPiN,MAAO,UACPhN,KAAM,UACN+D,KAAM,WAERkJ,UAAW,CACTD,MAAO,UACPhN,KAAM,UACN+D,KAAM,WAERuF,QAAS,CACP0D,MAAO,UACPhN,KAAM,UACN+D,KAAM,WAERD,MAAO,CACLkJ,MAAO,UACPhN,KAAM,UACN+D,KAAM,cAKSmJ,G,YACnB,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KA4BR1D,gBAAkB,SAAC2D,GACjB,EAAKC,SAAS,CACZjH,UAAWgH,KA/BG,EAoClBE,sBAAwB,SAACvK,GAEvBwK,aAAaC,QAAQ,WAAYC,KAAKC,UAAU3K,IAEhD,EAAKsK,SAAS,CACZhL,SAAUU,KAzCI,EA8ClBsD,iBAAmB,SAACnB,GAClB,EAAKmI,SAAS,CACZM,SAAUzI,KAhDI,EAwDlB0I,qBAAuB,SAACnJ,GACtB,GAAY,KAATA,EAAH,CAGE,IAAMS,EAAO,EAAK2I,MAAMF,SAClBG,EAAc,YAAO,EAAKD,MAAM5J,aAEhC8J,EAAU,CACd7K,GAAIuC,KAAKlD,SACTkC,KAAMA,EACNS,KAAMA,GAGR4I,EAAezM,KAAK0M,GAEpBD,EAAeE,MAAK,SAACC,EAAGC,GAAJ,OAAUC,WAAWF,EAAE/I,MAAQiJ,WAAWD,EAAEhJ,SAGhEqI,aAAaC,QAAQ,cAAeC,KAAKC,UAAUI,IAEnD,EAAKT,SAAS,CACZjH,UAAW,GACXuH,SAAU,KACV1J,YAAa6J,MA/ED,EAqFlBM,4BAA8B,WAE5Bb,aAAac,WAAW,eACxBd,aAAac,WAAW,YAExB,EAAKhB,SAAS,CACZpJ,YAAa,MAzFf,EAAK4J,MAAQ,CACXxL,SAAU,KACV+D,UAAW,GACXuH,SAAU,KACV1J,YAAa,IANC,E,iFAmBhB,IAAMqK,EAAiBb,KAAKc,MAAMhB,aAAaiB,QAAQ,gBAAkB,MACnEC,EAAchB,KAAKc,MAAMhB,aAAaiB,QAAQ,aAAe,QAEnEE,KAAKrB,SAAS,CACZhL,SAAUoM,EACVxK,YAAaqK,M,+BAwEf,OACE,kBAAC,IAAM5L,SAAP,KACE,kBAACiM,EAAA,EAAD,MACA,kBAACC,GAAA,EAAD,CAAe5P,MAAOA,IACpB,kBAAC,IAAD,KACE,kBAAC6E,EAAA,EAAD,CAAWwH,SAAS,KAAKC,gBAAc,GACrC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOuD,KAAK,SACV,kBAAChO,EAAA,EAAD,CAAMC,IAAE,EAACC,QAAS,KAChB,6BACE,kBAACoF,EAAD,CACE9D,SAAUqM,KAAKb,MAAMxL,SACrB+D,UAAWsI,KAAKb,MAAMzH,UACtBnC,YAAayK,KAAKb,MAAM5J,YACxBoC,iBAAkBqI,KAAKrI,iBACvB7D,kBAAmBkM,KAAKpB,sBACxBpJ,wBAAyBwK,KAAKN,8BAChC,kBAAC5E,GAAD,CACEnH,SAAUqM,KAAKb,MAAMxL,SACrB+D,UAAWsI,KAAKb,MAAMzH,UACtBqD,gBAAiBiF,KAAKjF,gBACtBC,iBAAkBgF,KAAKd,0BAI/B,kBAAC,IAAD,CAAOkB,OAAK,EAACD,KAAK,KAChB,kBAAC5O,EAAD,gB,GA3HeI,IAAM0O,W,MC/BvCC,IAASC,OAAO,kBAAC,GAAD,MAAS5E,SAAS6E,eAAe,W","file":"static/js/main.dd8fa7c2.chunk.js","sourcesContent":["import React from 'react'\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\n// Material UI Components\r\nimport { makeStyles, Fade, Box, Icon, Typography, Zoom } from '@material-ui/core';\r\n\r\n// Material UI Custom Component Style\r\nconst useStyles = makeStyles(theme => ({\r\n    Box: {\r\n        cursor: 'pointer',\r\n        height: '100vh',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n        textDecoration: 'none',\r\n    },\r\n    Icon: {\r\n        fontSize: theme.typography.h1.fontSize,\r\n        color: theme.palette.primary.main\r\n    },\r\n}));\r\n\r\nexport default function Start() {\r\n    const Style = useStyles();\r\n    const history = useHistory();\r\n    const [startFadeAnimation, setStartFadeAnimation] = React.useState(true);\r\n    const [typoAnimation, setTypoAnimation] = React.useState(false);\r\n\r\n    // This method will fade out the content and will switch to the selection \"page\"\r\n    const handleClick = (event) => {\r\n        event.preventDefault();\r\n        \r\n        setStartFadeAnimation(!startFadeAnimation);\r\n\r\n        setTimeout(() => {\r\n            history.push(\"/game\");\r\n        }, 2000);\r\n    } \r\n\r\n    React.useEffect(() => {\r\n        setTimeout(() => {\r\n            setTypoAnimation(true);\r\n        }, 5000);\r\n    }, [setTypoAnimation]);\r\n    \r\n    return (\r\n        <Fade in={startFadeAnimation} timeout={2000}>\r\n            <Box className={Style.Box} p={2} onClick={(event) => handleClick(event)}> \r\n                <Typography variant=\"button\" style={{visibility: \"hidden\"}}>Click anywhere to continue</Typography>\r\n                <Zoom in timeout={4000}>\r\n                    <Icon className={`${Style.Icon} fas fa-bullseye logo`} />\r\n                </Zoom>\r\n                <Fade in={typoAnimation} timeout={2000} >\r\n                    <Typography variant=\"button\" color=\"textPrimary\">Click anywhere to continue</Typography>\r\n                </Fade>\r\n            </Box>\r\n        </Fade>\r\n    )\r\n}","import React from 'react'\r\n\r\n// Material UI Components\r\nimport { makeStyles, List, ListItem, ListItemAvatar, Avatar, Button, Icon, ListItemText, DialogContent, DialogActions } from '@material-ui/core';\r\n\r\n// Material UI Custom Component Style\r\nconst useStyles = makeStyles(theme => ({\r\n    Selected: {\r\n        background: theme.palette.primary.main,\r\n        color: theme.palette.common.white,\r\n        '&:hover' : {\r\n            background: theme.palette.primary.main,\r\n            color: theme.palette.common.white,\r\n        }\r\n    },\r\n    Avatar: {\r\n      width: theme.spacing(6),\r\n      height: theme.spacing(6),\r\n      background: theme.palette.grey[300]\r\n    },\r\n  }));\r\n\r\nexport default function Edit( { cardType, cardTypes, random, onClickSelectCard, handleDialogClose } ) {\r\n    const Style = useStyles();\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <DialogContent style={{maxHeight: '500px'}}>\r\n                <List>\r\n                    {\r\n                        cardTypes.map(card => {\r\n                            return(\r\n                                <ListItem \r\n                                    key={card.id} \r\n                                    button \r\n                                    className={cardType !== null && cardType.index === card.index ? Style.Selected : cardType === null && card.index === 0 ? Style.Selected : \"\"}\r\n                                    onMouseDown={handleDialogClose}\r\n                                    onClick={() => onClickSelectCard(card)}>\r\n                                    <ListItemAvatar>\r\n                                        <Avatar alt={card.title} className={Style.Avatar} variant=\"rounded\">\r\n                                            <Icon \r\n                                                className={\r\n                                                    card.title === \"Brands\"\r\n                                                        ? `fab ${card.icons[random]}`\r\n                                                            : `fas ${card.icons[random]}`\r\n                                                    } \r\n                                                style={{width: 'auto'}} \r\n                                                color=\"primary\" />\r\n                                        </Avatar>\r\n                                    </ListItemAvatar>\r\n                                    <ListItemText primary={card.title} variant=\"h1\" />\r\n                                </ListItem>\r\n                            );\r\n                        })\r\n                    }\r\n                </List>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleDialogClose} color=\"inherit\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => onClickSelectCard(cardTypes[random])} color=\"primary\" variant=\"contained\">\r\n                        Random\r\n                    </Button>\r\n                </DialogActions>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\n// Material UI Components\r\nimport { makeStyles, List, ListItem, Typography, Button, DialogContent, DialogActions, Hidden } from '@material-ui/core';\r\n\r\n// Material UI Custom Component Style\r\nconst useStyles = makeStyles(theme => ({\r\n    Selected: {\r\n        background: theme.palette.primary.main,\r\n        color: theme.palette.common.white,\r\n        '&:hover' : {\r\n            background: theme.palette.primary.main,\r\n            color: theme.palette.common.white,\r\n        }\r\n    },\r\n    Container: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between'\r\n    },\r\n    Button: {\r\n        background: theme.palette.error.main,\r\n        color: theme.palette.common.white,\r\n        '&:hover' : {\r\n            background: theme.palette.error.dark,\r\n            color: theme.palette.common.white,\r\n        }\r\n    },\r\n  }));\r\n\r\nexport default function Leaderboard( { leaderboard, handleDialogClose, onClickClearLeaderboard } ) {\r\n    const Style = useStyles();\r\n\r\n    // This method will cut the name to 5 characters long and will add the ... at then end to signify that there are hidden characters\r\n    const handleCutName = (name) => {\r\n        const nameArray = name.split(\"\");\r\n        const newNameArray = nameArray.slice(0, 5);\r\n        const newName = newNameArray.join(\"\");\r\n\r\n        return `${newName}...`\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <DialogContent style={{maxHeight: '500px'}}>\r\n                <List>\r\n                    {\r\n                        leaderboard.map((item, index) => {\r\n                            return(\r\n                                <ListItem \r\n                                    key={item.id} \r\n                                    className={item.id === leaderboard[0].id ? `${Style.Selected} ${Style.Container}` : Style.Container}\r\n                                    divider\r\n                                >\r\n                                    <div className={Style.Container} style={{justifyContent: 'stretch'}}>\r\n                                        <Typography variant=\"body1\" color=\"textSecondary\" style={{marginRight: '0.5rem', fontWeight: 'normal'}}>{`${index + 1})`}</Typography>\r\n                                        <Hidden smUp>\r\n                                            <Typography variant=\"h6\">{item.name.length > 5 ? handleCutName(item.name) : item.name}</Typography>\r\n                                        </Hidden>\r\n                                        <Hidden xsDown>\r\n                                            <Typography variant=\"h6\">{item.name}</Typography>\r\n                                        </Hidden>\r\n                                    </div>\r\n                                    <Typography variant=\"body1\" style={{marginLeft: '2.25rem'}}>{item.time}s</Typography>\r\n                                </ListItem>\r\n                            );\r\n                        })\r\n                    }\r\n                </List>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleDialogClose} color=\"inherit\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button className={Style.Button} variant=\"contained\" onClick={() => onClickClearLeaderboard()} disabled={leaderboard.length <= 0 ? true : false} >\r\n                        Clear\r\n                    </Button>\r\n                </DialogActions>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\n// Material UI Components\r\nimport { makeStyles, DialogContentText, Button, DialogContent, DialogActions } from '@material-ui/core';\r\n\r\n// Material UI Custom Component Style\r\nconst useStyles = makeStyles(theme => ({\r\n    Button: {\r\n        color: theme.palette.error.main\r\n    },\r\n}));\r\n\r\nexport default function Restart( {handleDialogClose} ) {\r\n    const Style = useStyles();\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <DialogContent>\r\n                    <DialogContentText id=\"alertDescription\">Are you sure you want to stop the game?</DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleDialogClose} color=\"inherit\">\r\n                        No\r\n                    </Button>\r\n                    <Button className={Style.Button} onMouseDown={handleDialogClose} onClick={() => {window.location.reload(false)}}>\r\n                        Yes\r\n                    </Button>\r\n                </DialogActions>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","const cardTypes = [\r\n    {\r\n        id: Math.random(),\r\n        title: 'Animals',\r\n        icons: [\r\n            \"fa-cat\", \"fa-cat\",\r\n            \"fa-dog\", \"fa-dog\",\r\n            \"fa-hippo\", \"fa-hippo\",\r\n            \"fa-fish\", \"fa-fish\",\r\n            \"fa-horse\", \"fa-horse\",\r\n            \"fa-dove\", \"fa-dove\",\r\n            \"fa-frog\", \"fa-frog\",\r\n            \"fa-crow\", \"fa-crow\"\r\n        ],\r\n        index: 0\r\n    },\r\n    {\r\n        id: Math.random(),\r\n        title: 'Brands',\r\n        icons: [\r\n            \"fa-apple\", \"fa-apple\",\r\n            \"fa-amazon\", \"fa-amazon\",\r\n            \"fa-facebook-f\", \"fa-facebook-f\",\r\n            \"fa-behance\", \"fa-behance\",\r\n            \"fa-react\", \"fa-react\",\r\n            \"fa-js\", \"fa-js\",\r\n            \"fa-github\", \"fa-github\",\r\n            \"fa-google\", \"fa-google\"\r\n        ],\r\n        index: 1\r\n    },\r\n    {\r\n        id: Math.random(),\r\n        title: 'Buildings',\r\n        icons:     [\r\n            \"fa-campground\", \"fa-campground\",\r\n            \"fa-church\", \"fa-church\",\r\n            \"fa-hospital\", \"fa-hospital\",\r\n            \"fa-igloo\", \"fa-igloo\",\r\n            \"fa-industry\", \"fa-industry\",\r\n            \"fa-monument\", \"fa-monument\",\r\n            \"fa-mosque\", \"fa-mosque\",\r\n            \"fa-vihara\", \"fa-vihara\"\r\n        ],\r\n        index: 2\r\n    },\r\n    {\r\n        id: Math.random(),\r\n        title: 'Construction',\r\n        icons:     [\r\n            \"fa-brush\", \"fa-brush\",\r\n            \"fa-drafting-compass\", \"fa-drafting-compass\",\r\n            \"fa-hammer\", \"fa-hammer\",\r\n            \"fa-hard-hat\", \"fa-hard-hat\",\r\n            \"fa-paint-roller\", \"fa-paint-roller\",\r\n            \"fa-screwdriver\", \"fa-screwdriver\",\r\n            \"fa-wrench\", \"fa-wrench\",\r\n            \"fa-ruler\", \"fa-ruler\"\r\n        ],\r\n        index: 3\r\n    },\r\n    {\r\n        id: Math.random(),\r\n        title: 'Currency',\r\n        icons:     [\r\n            \"fa-dollar-sign\", \"fa-dollar-sign\",\r\n            \"fa-euro-sign\", \"fa-euro-sign\",\r\n            \"fa-pound-sign\", \"fa-pound-sign\",\r\n            \"fa-yen-sign\", \"fa-yen-sign\",\r\n            \"fa-won-sign\", \"fa-won-sign\",\r\n            \"fa-rupee-sign\", \"fa-rupee-sign\",\r\n            \"fa-tenge\", \"fa-tenge\",\r\n            \"fa-ruble-sign\", \"fa-ruble-sign\",\r\n        ],\r\n        index: 4\r\n    },\r\n    {\r\n        id: Math.random(),\r\n        title: 'Emoji',\r\n        icons:     [\r\n            \"fa-grin\", \"fa-grin\",\r\n            \"fa-angry\", \"fa-angry\",\r\n            \"fa-dizzy\", \"fa-dizzy\",\r\n            \"fa-flushed\", \"fa-flushed\",\r\n            \"fa-grimace\", \"fa-grimace\",\r\n            \"fa-grin-beam\", \"fa-grin-beam\",\r\n            \"fa-grin-hearts\", \"fa-grin-hearts\",\r\n            \"fa-grin-tongue-squint\", \"fa-grin-tongue-squint\"\r\n        ],\r\n        index: 5\r\n    },\r\n    {\r\n        id: Math.random(),\r\n        title: 'Food',\r\n        icons:     [\r\n            \"fa-bacon\", \"fa-bacon\",\r\n            \"fa-carrot\", \"fa-carrot\",\r\n            \"fa-drumstick-bite\", \"fa-drumstick-bite\",\r\n            \"fa-egg\", \"fa-egg\",\r\n            \"fa-hamburger\", \"fa-hamburger\",\r\n            \"fa-hotdog\", \"fa-hotdog\",\r\n            \"fa-ice-cream\", \"fa-ice-cream\",\r\n            \"fa-pizza-slice\", \"fa-pizza-slice\"\r\n        ],\r\n        index: 6\r\n    },\r\n    {\r\n        id: Math.random(),\r\n        title: 'Maths',\r\n        icons:     [\r\n            \"fa-divide\", \"fa-divide\",\r\n            \"fa-equals\", \"fa-equals\",\r\n            \"fa-infinity\", \"fa-infinity\",\r\n            \"fa-minus\", \"fa-minus\",\r\n            \"fa-percentage\", \"fa-percentage\",\r\n            \"fa-plus\", \"fa-plus\",\r\n            \"fa-times\", \"fa-times\",\r\n            \"fa-square-root-alt\", \"fa-square-root-alt\"\r\n        ],\r\n        index: 7\r\n    },\r\n    {\r\n        id: Math.random(),\r\n        title: 'Sports',\r\n        icons:     [\r\n            \"fa-baseball-ball\", \"fa-baseball-ball\",\r\n            \"fa-basketball-ball\", \"fa-basketball-ball\",\r\n            \"fa-bowling-ball\", \"fa-bowling-ball\",\r\n            \"fa-football-ball\", \"fa-football-ball\",\r\n            \"fa-table-tennis\", \"fa-table-tennis\",\r\n            \"fa-volleyball-ball\", \"fa-volleyball-ball\",\r\n            \"fa-futbol\", \"fa-futbol\",\r\n            \"fa-golf-ball\", \"fa-golf-ball\"\r\n        ],\r\n        index: 8\r\n    },\r\n    {\r\n        id: Math.random(),\r\n        title: 'Vehicles',\r\n        icons:     [\r\n            \"fa-bus\", \"fa-bus\",\r\n            \"fa-car\", \"fa-car\",\r\n            \"fa-subway\", \"fa-subway\",\r\n            \"fa-ship\", \"fa-ship\",\r\n            \"fa-taxi\", \"fa-taxi\",\r\n            \"fa-train\", \"fa-train\",\r\n            \"fa-wheelchair\", \"fa-wheelchair\",\r\n            \"fa-bicycle\", \"fa-bicycle\"\r\n        ],\r\n        index: 9\r\n    },\r\n]\r\n\r\nexport default cardTypes;","import React from 'react'\r\n\r\n// Components\r\nimport Edit from './DialogContentTypes/Edit/Edit';\r\nimport Leaderboard from './DialogContentTypes/Leaderboard/Leaderboard';\r\nimport Stop from './DialogContentTypes/Stop/Stop.js';\r\n\r\n// Card Types\r\nimport cardTypes from '../../cardTypes';\r\n\r\n// Material UI Components\r\nimport { makeStyles, AppBar, Toolbar, Typography, Tooltip, Button, Icon, Dialog, DialogTitle, IconButton } from '@material-ui/core';\r\n\r\n// Material UI Custom Component Style\r\nconst useStyles = makeStyles(theme => ({\r\n    AppBar: {\r\n        position: 'relative',\r\n        zIndex: 10,\r\n        background: theme.palette.background.default\r\n    },\r\n    Toolbar: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n    },\r\n    Icon: {\r\n        width: '100%'\r\n    },\r\n    Orange: {\r\n        color: '#F39C12'\r\n    },\r\n    Yellow: {\r\n        color: '#F1C40F'\r\n    },\r\n    Teal: {\r\n        color: '#1ABC9C'\r\n    },\r\n    Red: {\r\n        color: '#E74C3C'\r\n    },\r\n    Button: {\r\n        color: theme.palette.error.main\r\n    },\r\n}));\r\n\r\nexport default function Header( { cardType, gameState, leaderboard, handleGetSeconds, onClickSelectCard, onClickClearLeaderboard } ) {\r\n    const Style = useStyles();\r\n\r\n    let [randomIcon, setRandomIcon] = React.useState(null);\r\n\r\n    const [startTimer, setStartTimer] = React.useState(false);\r\n    let [time, setTime] = React.useState(0);\r\n\r\n    const random = Math.floor(Math.random() * Math.floor(15));\r\n\r\n    React.useEffect(() => {\r\n        let timerinterval;\r\n        let iconinterval;\r\n        const seconds = 5000;\r\n\r\n        switch(gameState){\r\n            case \"\":\r\n                setStartTimer(false);\r\n                setTime(0);\r\n\r\n                iconinterval = setInterval(() => {\r\n                    const newRandom = Math.floor(Math.random() * Math.floor(15));\r\n                    setRandomIcon(() => {\r\n                        return(\r\n                            cardType === null \r\n                                ? `fas ${cardTypes[0].icons[newRandom]}`\r\n                                    : cardType.title === \"Brands\"\r\n                                        ? `fab ${cardType.icons[newRandom]}`\r\n                                            : `fas ${cardType.icons[newRandom]}`\r\n                    )})\r\n                }, randomIcon === null ? 50 : seconds);\r\n\r\n                break;\r\n            case \"Started\":\r\n                setTimeout(() => {\r\n                    setStartTimer(true)\r\n                }, 5000);\r\n\r\n                clearInterval(iconinterval);\r\n                break;\r\n            case \"Stopped\":\r\n                setTimeout(() => {\r\n                    setStartTimer(false)\r\n                    handleGetSeconds(time);\r\n                }, 0);\r\n\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        if(startTimer === true){\r\n            timerinterval = setInterval(() => {\r\n                setTime(newTime => newTime + 1);\r\n                console.log(time)\r\n            }, 1000); \r\n        }else{\r\n            clearInterval(timerinterval);\r\n        }\r\n\r\n        return () => {clearInterval(iconinterval); clearInterval(timerinterval);};\r\n    }, [gameState, setRandomIcon, cardType, random, randomIcon, startTimer, setTime, time, handleGetSeconds]);\r\n\r\n    // Dialog\r\n    const [openDialog, setOpenDialog] = React.useState(false);\r\n    const [dialogType, setDialogType] = React.useState(null);\r\n\r\n    // This method will open the dialog and set the dialog content to the type\r\n    const handleClickDialogOpen = (type) => {\r\n        setOpenDialog(true);\r\n        setDialogType(type)\r\n    };\r\n    \r\n    // This method will close the dialog \r\n    const handleDialogClose = () => {\r\n        setOpenDialog(false);\r\n        setRandomIcon(null);\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <AppBar className={Style.AppBar} color=\"transparent\" position=\"static\" variant=\"outlined\" square>\r\n                <Toolbar className={Style.Toolbar}>\r\n                    {\r\n                        gameState === \"Started\" || gameState === \"Stopped\"\r\n                            ? \r\n                            <Typography color=\"primary\" variant=\"h6\">{time}<span>s</span></Typography>\r\n                                :\r\n                                <Tooltip title=\"Change Card Type\" placement=\"right\">\r\n                                    <span>\r\n                                        <IconButton aria-label=\"Change Card Type\" color=\"primary\" variant=\"text\" edge=\"start\" onClick={() => handleClickDialogOpen(\"Edit\")}>\r\n                                            <i className={`${randomIcon} `} style={{width: '1.125em'}}  />\r\n                                        </IconButton>\r\n                                    </span>\r\n                                </Tooltip>\r\n                    }\r\n                    <Button aria-label=\"Logo\" color=\"inherit\" disableFocusRipple size=\"large\" variant=\"text\">\r\n                        <span className={Style.Orange}>Con</span>\r\n                        <span className={Style.Yellow}>cen</span>\r\n                        <span className={Style.Teal}>tra</span>\r\n                        <span className={Style.Red}>tion</span>\r\n                    </Button>\r\n                    <Tooltip title={gameState === \"Started\" || gameState === \"Stopped\" ? \"Stop Game\" : leaderboard.length <= 0 ? \"\" : \"Leaderboard\"} placement=\"left\">\r\n                        <span>\r\n                            {\r\n                                gameState === \"Started\" || gameState === \"Stopped\"\r\n                                    ? \r\n                                        <IconButton aria-label=\"Stop Game\" className={Style.Button} variant=\"text\" edge=\"end\" onClick={() => handleClickDialogOpen(\"Stop\")}>\r\n                                            <Icon className={`${Style.Icon} fas fa-ban`} />\r\n                                        </IconButton>\r\n                                        : \r\n                                        <IconButton aria-label=\"Leaderboard\" color=\"secondary\" variant=\"text\" edge=\"end\" onClick={() => handleClickDialogOpen(\"Leaderboard\")} disabled={leaderboard.length <= 0 ? true : false}>\r\n                                            <Icon className={`${Style.Icon} fas fa-trophy`} />\r\n                                        </IconButton>\r\n                            }\r\n                        </span>\r\n                    </Tooltip>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Dialog\r\n                open={openDialog}\r\n                onClose={handleDialogClose}\r\n                aria-labelledby=\"dialogTitle\"\r\n            >\r\n                <DialogTitle id=\"dialogTitle\">\r\n                    {\r\n                        dialogType === \"Edit\" \r\n                            ? \"Change Card Type\"\r\n                                : dialogType === \"Leaderboard\" \r\n                                    ? \"Leaderboard\"\r\n                                        : dialogType === \"Stop\" \r\n                                            ? \"Stop Game\"\r\n                                                : \"\"\r\n                    }\r\n                </DialogTitle>\r\n                {\r\n                    dialogType === \"Edit\" \r\n                        ? <Edit cardType={cardType} cardTypes={cardTypes} random={Math.floor(Math.random() * Math.floor(9))} onClickSelectCard={onClickSelectCard} handleDialogClose={handleDialogClose} />\r\n                            : dialogType === \"Leaderboard\" \r\n                                ? <Leaderboard leaderboard={leaderboard} handleDialogClose={handleDialogClose} onClickClearLeaderboard={onClickClearLeaderboard} />\r\n                                    : dialogType === \"Stop\" \r\n                                        ? <Stop leaderboard={leaderboard} handleDialogClose={handleDialogClose} onClickClearLeaderboard={onClickClearLeaderboard} />\r\n                                            : \"\"\r\n                }\r\n            </Dialog>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\n// Material UI Components\r\nimport { makeStyles, Backdrop, Box, Container, Paper, Fade, Typography, Grid, Button, Hidden, Icon, Dialog, TextField, DialogContent, DialogActions, Zoom } from '@material-ui/core';\r\n\r\n// Material UI Custom Component Style\r\nconst useStyles = makeStyles(theme => ({\r\n    Backdrop: {\r\n        zIndex: '1'\r\n    },\r\n    Countdown: {\r\n        height: [['100%'], '!important'],\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n    CountdownHeader: {\r\n        fontWeight: '500',\r\n        fontSize: '7.5rem',\r\n    },\r\n    DispNone: {\r\n        display: 'none'\r\n    },\r\n    Disp: {\r\n        display: ''\r\n    },\r\n    Hidden: {\r\n        visibility: 'hidden'\r\n    },\r\n    Visible: {\r\n        visibility: 'visible'\r\n    },\r\n    Button: {\r\n        color: theme.palette.primary.main,\r\n        boxShadow: theme.shadows[0],\r\n        '&:hover': {\r\n            boxShadow: theme.shadows[0],\r\n        }\r\n    },\r\n    ButtonSmall: {\r\n        padding: theme.spacing(2.5, 1)\r\n    },\r\n    ButtonLarge: {\r\n        padding: theme.spacing(4, 1)\r\n    },\r\n    Icon: {\r\n        width: '100%'\r\n    },\r\n    Close: {\r\n        '& span': {\r\n            visibility: 'hidden'\r\n        }\r\n    },\r\n    Open: {\r\n        '& span': {\r\n            visibility: 'visible'\r\n        }\r\n    },\r\n    Match: {\r\n        backgroundColor: theme.palette.success.main,\r\n        color: theme.palette.common.white,\r\n\r\n        '&:hover': {\r\n            backgroundColor: theme.palette.success.main,\r\n            color: theme.palette.common.white,\r\n        }\r\n    },\r\n    Wrong: {\r\n        backgroundColor: theme.palette.error.main,\r\n        color: theme.palette.common.white,\r\n        '&:hover': {\r\n            backgroundColor: theme.palette.error.main,\r\n            color: theme.palette.common.white,\r\n        }\r\n    },\r\n}));\r\n\r\nexport default function Game( { cardType, gameState, handleGameState, onClickEnterName, } ) {\r\n    const Style = useStyles();\r\n\r\n    // Backdrop \r\n    const [openBackdrop, setOpenBackdrop] = React.useState(true);\r\n    let [countdown, setCountdown] = React.useState(5);\r\n\r\n    const colors = [\"#3498DB\", \"#F39C12\", \"#F1C40F\", \"#1ABC9C\", \"#E74C3C\", \"#3498DB\"];\r\n    \r\n    // This method will countdown to 0 then will start the game \r\n    const handleClickStartGame = () => {\r\n        setOpenBackdrop(false);\r\n        handleClickDialogOpen(\"Countdown\");\r\n\r\n        let colorIndex = 0;\r\n\r\n        setTimeout(() => {\r\n            handleGameState(\"Started\");\r\n        }, 750);\r\n        \r\n        const interval = setInterval(() => {\r\n            setCountdown(--countdown);\r\n            colorIndex = ++colorIndex;\r\n            \r\n            if(countdown <= 0){\r\n                clearInterval(interval);\r\n                setTimeout(() => {\r\n                    handleDialogClose()\r\n                }, 750);\r\n            }\r\n        }, 1000); \r\n    }\r\n\r\n    // Game\r\n    let openCards = [];\r\n    let matchedCards = [];\r\n\r\n    const iconsArray = (cardType === null) \r\n        ? [\r\n            \"fa-cat\", \"fa-cat\",\r\n            \"fa-dog\", \"fa-dog\",\r\n            \"fa-hippo\", \"fa-hippo\",\r\n            \"fa-fish\", \"fa-fish\",\r\n            \"fa-horse\", \"fa-horse\",\r\n            \"fa-dove\", \"fa-dove\",\r\n            \"fa-frog\", \"fa-frog\",\r\n            \"fa-crow\", \"fa-crow\"\r\n        ]\r\n            : cardType.icons;\r\n\r\n    // This method shuffles the icons\r\n    const shuffle = (iconArray) => {\r\n        let currentIndex = iconArray.length, temporaryValue, randomIndex;\r\n\r\n        while (currentIndex !== 0) {\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex -= 1;\r\n            temporaryValue = iconArray[currentIndex];\r\n            iconArray[currentIndex] = iconArray[randomIndex];\r\n            iconArray[randomIndex] = temporaryValue;\r\n        }\r\n        return iconArray;\r\n    }\r\n\r\n    /* \r\n        This method will handle whenever the user clicks on a card\r\n    */\r\n    const handleIconClick = (event, index, icon) => {\r\n        event.preventDefault();\r\n\r\n        if(openCards.length <= 1){\r\n            const allCards = document.querySelectorAll(\".Card\");\r\n            const currentCard = allCards[index - 1];\r\n            const currentCardButton = currentCard.firstChild;\r\n            const currentCardButtonClassList = currentCardButton.classList;\r\n            \r\n            if((!currentCardButtonClassList.contains(Style.Open)) && (!currentCardButtonClassList.contains(Style.Match))){\r\n                currentCardButton.classList.remove(Style.Close)\r\n                currentCardButton.classList.add(Style.Open);\r\n                openCards.push(currentCard);\r\n\r\n                if(openCards.length > 1){\r\n                    const otherCard = openCards[0];\r\n                    const otherCardButton = otherCard.firstChild;\r\n                    const otherCardIconParent = otherCardButton.firstChild;\r\n                    const otherCardIcon = otherCardIconParent.firstChild;\r\n                    const otherCardIconClassList = otherCardIcon.classList;\r\n\r\n                    if(otherCardIconClassList.contains(icon)){\r\n                        currentCardButton.classList.add(Style.Match);\r\n                        otherCardButton.classList.add(Style.Match);\r\n\r\n                        matchedCards.push(otherCardButton);\r\n                        matchedCards.push(currentCardButton);\r\n                        openCards = [];\r\n                    }else{\r\n                        currentCardButton.classList.add(Style.Wrong);\r\n                        otherCardButton.classList.add(Style.Wrong);\r\n\r\n                        setTimeout(() => {\r\n                                currentCardButton.classList.remove(Style.Open, Style.Wrong);\r\n                                otherCardButton.classList.remove(Style.Open, Style.Wrong);\r\n                                currentCardButton.classList.add(Style.Close);\r\n                                otherCardButton.classList.add(Style.Close);\r\n\r\n                                openCards = [];\r\n                        }, 500);\r\n                    }\r\n                }\r\n            }\r\n        }else{\r\n            return\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        let interval;\r\n        \r\n        switch(gameState){\r\n            case \"\":\r\n                setCountdown(5);\r\n                clearInterval(interval);\r\n\r\n                break;\r\n            case \"Started\":\r\n                interval = setInterval(() => {\r\n                    if(matchedCards.length === 16){\r\n                        clearInterval(interval);\r\n                        handleGameState(\"Stopped\");\r\n                        handleClickDialogOpen(\"Name\");\r\n                    }\r\n                }, 500);\r\n\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return () => clearInterval(interval);\r\n    }, [matchedCards, handleGameState, gameState]);\r\n\r\n    // Dialog\r\n    const [openDialog, setOpenDialog] = React.useState(false);\r\n    const [dialogType, setDialogType] = React.useState(null);\r\n    const [name, setName] = React.useState('');\r\n\r\n    // This method will handle the name if the user types a name that is longer than 18 characters long a message will display\r\n    const handleNameMaxLength = (event) => {\r\n        if(name.length > 18){\r\n            if(event.key === \"Backspace\" || event.key === \"Delete\"){\r\n                setName(\"\");\r\n                event.target.value = \"\";\r\n            }else{\r\n                event.target.value = \"Limit of 18 Characters reached.\";\r\n                return\r\n            }\r\n        }else{\r\n            return\r\n        }\r\n    }\r\n\r\n    // This method will open the dialog and set the dialog content to the type\r\n    const handleClickDialogOpen = (type) => {\r\n        setOpenDialog(true);\r\n        setDialogType(type);\r\n    };\r\n    \r\n    // This method will close the dialog \r\n    const handleDialogClose = (type) => {\r\n        setOpenDialog(false);\r\n        if(type === \"Name\"){\r\n            setName(\"\");\r\n            handleGameState(\"\");\r\n            setOpenBackdrop(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Backdrop className={Style.Backdrop} open={openBackdrop}>\r\n                <Paper variant=\"outlined\">\r\n                    <Box p={6}>\r\n                        <Button aria-label=\"Start\" color=\"primary\" size=\"large\" variant=\"contained\" onClick={() => handleClickStartGame()}>Start Game</Button>\r\n                    </Box>\r\n                </Paper>\r\n            </Backdrop>\r\n            <Fade in={openBackdrop === true ? false : true} timeout={2000} >\r\n                <Box className={openBackdrop === true ? Style.Hidden : Style.Visible} m={2}>\r\n                    <Container maxWidth=\"sm\" disableGutters>\r\n                        <Grid container spacing={1} variant=\"outlined\" alignContent=\"center\" alignItems=\"center\">\r\n                            {\r\n                                shuffle(iconsArray).map((i, index) => {\r\n                                    return(\r\n                                        <Grid className=\"Card\" key={Math.random()} item xs={3}>\r\n                                                <Hidden smUp>\r\n                                                    <Button className={`${Style.Button} ${Style.ButtonSmall} ${Style.Close}`} variant=\"contained\" size=\"large\" fullWidth onMouseDown={(event) => handleIconClick(event, index + 1, i)}>\r\n                                                        <Icon \r\n                                                            className={\r\n                                                                cardType === null\r\n                                                                    ? `fas ${i} ${Style.Icon}`\r\n                                                                        : cardType.title === \"Brands\"\r\n                                                                            ? `fab ${i} ${Style.Icon}`\r\n                                                                                : `fas ${i} ${Style.Icon}`\r\n                                                            } \r\n                                                            style={{fontSize: '2.25rem'}}></Icon>\r\n                                                    </Button>\r\n                                                </Hidden>\r\n                                                <Hidden xsDown>\r\n                                                    <Button className={`${Style.Button} ${Style.ButtonLarge} ${Style.Close}`} variant=\"contained\" size=\"large\" fullWidth onMouseDown={(event) => handleIconClick(event, index + 1, i)}> \r\n                                                        <Icon \r\n                                                            className={\r\n                                                                cardType === null\r\n                                                                    ? `fas ${i} ${Style.Icon}`\r\n                                                                        : cardType.title === \"Brands\"\r\n                                                                            ? `fab ${i} ${Style.Icon}`\r\n                                                                                : `fas ${i} ${Style.Icon}`\r\n                                                            } \r\n                                                            style={{fontSize: '3.375rem'}}>\r\n                                                        </Icon>\r\n                                                    </Button>\r\n                                                </Hidden>\r\n                                        </Grid>\r\n                                    );\r\n                                })\r\n                            } \r\n                        </Grid>\r\n                    </Container>\r\n                </Box>\r\n            </Fade>\r\n            <Dialog\r\n                open={openDialog}\r\n                fullScreen={dialogType === \"Name\" ? false : true}\r\n                aria-labelledby=\"dialogTitle\"\r\n                TransitionComponent={Fade}\r\n                transitionDuration={1000}\r\n            >\r\n                {\r\n                    dialogType === \"Name\"\r\n                        ?\r\n                        <React.Fragment>\r\n                            <DialogContent style={{maxHeight: '500px'}}>\r\n                                <Typography color=\"secondary\" variant=\"h6\">Congratulations</Typography>\r\n                                <Typography color=\"textPrimary\" variant=\"body1\">You have set a new time</Typography>\r\n                                <Box pt={2} />\r\n                                <TextField\r\n                                    margin=\"dense\"\r\n                                    id=\"name\"\r\n                                    label=\"Enter Name\"\r\n                                    type=\"text\"\r\n                                    onChange={(event) => setName(event.target.value)}\r\n                                    onKeyDown={(event) => handleNameMaxLength(event)}\r\n                                    value={name}\r\n                                    placeholder='Try \"John\"'\r\n                                    variant=\"outlined\"\r\n                                    fullWidth\r\n                                />\r\n                            </DialogContent>\r\n                            <DialogActions>\r\n                                <Button onClick={() => handleDialogClose(\"Name\")} color=\"inherit\">\r\n                                    Cancel\r\n                                </Button>\r\n                                <Button onClick={() => {handleDialogClose(\"Name\"); onClickEnterName(name);}} color=\"primary\">\r\n                                    Submit\r\n                                </Button>\r\n                            </DialogActions>\r\n                        </React.Fragment>\r\n                            : dialogType === \"Countdown\"\r\n                                ?\r\n                                <DialogContent className={Style.Countdown}>\r\n                                    {\r\n                                        colors.map((color, index) => {\r\n                                            return(\r\n                                                <Zoom key={index} in={countdown === (-1*(index-5)) ? true : false} timeout={1000}>\r\n                                                    <Typography          \r\n                                                        className={`${Style.CountdownHeader} ${countdown === (-1*(index-5)) ? Style.Disp : Style.DispNone}`} \r\n                                                        variant=\"h1\" style={{color: color}} >{countdown === 0 ? \"GO\" : countdown}\r\n                                                    </Typography>\r\n                                                </Zoom>\r\n                                            );\r\n                                        })\r\n                                    }\r\n                                </DialogContent>\r\n                                    : \"\"\r\n                }\r\n            </Dialog>\r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport {HashRouter as Router, Switch, Route} from \"react-router-dom\";\n\n// Components\nimport Start from '../components/Start/Start';\nimport Header from '../components/Header/Header';\nimport Game from '../components/Game/Game';\n\n// Material UI Components\nimport { ThemeProvider, Container, Fade } from '@material-ui/core';\n\n// Material UI Custom Theme\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: '#85C1E9',\n      main: '#3498DB',\n      dark: '#2874A6',\n    },\n    secondary: {\n      light: '#F7DC6F',\n      main: '#F1C40F',\n      dark: '#B7950B',\n    },\n    success: {\n      light: '#82E0AA',\n      main: '#2ECC71',\n      dark: '#239B56',\n    },\n    error: {\n      light: '#F1948A',\n      main: '#E74C3C',\n      dark: '#B03A2E',\n    },\n  },\n});\n\nexport default class App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      cardType: null,\n      gameState: '',\n      gameTime: null,\n      leaderboard: [],\n    }\n  }\n\n  static propTypes = {\n    cardType: PropTypes.object,\n    gameState: PropTypes.string,\n    gameTime: PropTypes.number,\n    leaderboard: PropTypes.array,\n  }\n\n  componentDidMount(){\n    // Will set a variables with the value of the local storage \n    const setLeaderboard = JSON.parse(localStorage.getItem(\"Leaderboard\") || \"[]\");\n    const setCardType = JSON.parse(localStorage.getItem(\"CardType\") || \"null\");\n\n    this.setState({\n      cardType: setCardType,\n      leaderboard: setLeaderboard,\n    })\n  }\n\n  // This method will store the current phase of the application in the gameState state\n  handleGameState = (phase) => {\n    this.setState({\n      gameState: phase\n    })\n  }\n\n  // This method will store the icon array in the cardType state\n  handleClickSelectCard = (card) => {\n    // Setting the cardType array into our local storage\n    localStorage.setItem(\"CardType\", JSON.stringify(card));\n\n    this.setState({\n      cardType: card\n    })\n  }\n\n  // This method will store the seconds in the gameTime state\n  handleGetSeconds = (time) => {\n    this.setState({\n      gameTime: time\n    })\n  }\n\n  /* \n    This method will create an object that holds the name of the player and the number of seconds it took the player to match all cards\n    Then it will store the object in the leaderboard array\n  */ \n  handleClickEnterName = (name) => {\n    if(name === \"\"){\n      return\n    }else{\n      const time = this.state.gameTime;\n      const newLeaderboard = [...this.state.leaderboard];\n\n      const newItem = {\n        id: Math.random(),\n        name: name,\n        time: time\n      };\n\n      newLeaderboard.push(newItem);\n\n      newLeaderboard.sort((a, b) => parseFloat(a.time) - parseFloat(b.time));\n\n      // Setting the leaderboard array into our local storage\n      localStorage.setItem(\"Leaderboard\", JSON.stringify(newLeaderboard));\n\n      this.setState({\n        gameState: '',\n        gameTime: null,\n        leaderboard: newLeaderboard,\n      })\n    }\n  }\n\n  // This method will clear the leaderboard\n  handleClickClearLeaderboard = () => {\n    // Deleting the Leaderboard item and CardType from local storage\n    localStorage.removeItem(\"Leaderboard\")\n    localStorage.removeItem(\"CardType\")\n\n    this.setState({\n      leaderboard: []\n    })\n  }\n\n  render(){\n    return (\n      <React.Fragment>\n        <CssBaseline />\n        <ThemeProvider theme={theme}>\n          <Router>\n            <Container maxWidth=\"md\" disableGutters>\n              <Switch>\n                <Route path=\"/game\">\n                  <Fade in timeout={2000}>\n                    <div>\n                      <Header \n                        cardType={this.state.cardType} \n                        gameState={this.state.gameState} \n                        leaderboard={this.state.leaderboard} \n                        handleGetSeconds={this.handleGetSeconds} \n                        onClickSelectCard={this.handleClickSelectCard} \n                        onClickClearLeaderboard={this.handleClickClearLeaderboard} />\n                      <Game \n                        cardType={this.state.cardType} \n                        gameState={this.state.gameState} \n                        handleGameState={this.handleGameState} \n                        onClickEnterName={this.handleClickEnterName} />\n                    </div>\n                  </Fade>\n                </Route>\n                <Route exact path=\"/\">\n                  <Start />\n                </Route>\n              </Switch>\n            </Container>\n          </Router>\n        </ThemeProvider>\n      </React.Fragment>\n    );\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Components\nimport App from './container/App';\n\n// Style sheet\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}